{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","value","label","App","document","title","useState","active","setActive","confirmed","setConfirmed","death","setdeath","recovered","setRecoverd","lastupdated","setlastupdated","selected","setSelected","useEffect","axios","get","then","res","data","statewise","confiremed","deaths","lastupdatedtime","catch","err","console","log","className","onChange","placeholder","style","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.df527b8d.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Select from 'react-select';\n \nconst options = [\n  { value: 0, label: 'Total India' },\n  { value: 1, label: 'Maharastra' },\n  { value: 2, label: 'Tamil Nadu' },\n  { value: 3, label: 'Delhi' },\n  { value: 4, label: 'Gujarat' },\n  { value: 5, label: 'Uttar Pradesh' },\n  { value: 6, label: 'Rajasthan' },\n  { value: 7, label: 'West Bengal' },\n  { value: 8, label: 'Madhya Pradesh' },\n  { value: 9, label: 'Harayana' },\n  { value: 11, label: 'Karnataka' },\n  { value: 12, label: 'Andhra Pradesh' },\n  { value: 13, label: 'Bihar' },\n  { value: 14, label: 'Telangana' },\n  { value: 15, label: 'Jammu and Kashmir' },\n  { value: 16, label: 'Assam' },\n  { value: 17, label: 'Odisha' },\n  { value: 18, label: 'Punjab' },\n  { value: 19, label: 'Kerala' },\n  { value: 20, label: 'Uttarakhand' },\n  { value: 21, label: 'Chhattisgarh' },\n  { value: 22, label: 'Jharkhand' },\n  { value: 23, label: 'Tripura' },\n  { value: 24, label: 'Ladakh' },\n  { value: 25, label: 'Goa' },\n  { value: 26, label: 'Himachal Pradesh' },\n  { value: 27, label: 'Manipur' },\n  { value: 28, label: 'Chandigarh' },\n  { value: 29, label: 'Puducherry' },\n  { value: 30, label: 'Nagaland' },\n  { value: 31, label: 'Mizoram' },\n  { value: 32, label: 'Arunachal Pradesh' },\n  { value: 33, label: 'Sikkiam' },\n  { value: 34, label: 'Dadra and Nagar Haveli and Daman and Diu' },\n  { value: 35, label: 'Andaman and Nicobar Islands' },\n  { value: 36, label: 'Meghalaya' },\n  { value: 37, label: 'Lakshadweep' }\n\n];\nfunction App() {\n  document.title='Covid-19 India'\n  const [active,setActive] =useState([]);   //to store data\n  const [confirmed,setConfirmed] =useState([]);  //to store data\n  const [death,setdeath] =useState([]);  //to store data\n  const [recovered,setRecoverd] =useState([]);  //to store data\n  const [lastupdated,setlastupdated] =useState([]);  //to store data\nconst [selected,setSelected]=useState(0);   //to store data for drop down\n\n  useEffect(()=>{\naxios.get(`https://api.covid19india.org/data.json`)  //to fetch data from api\n.then(res=>{\n    const value=selected===0 ? res.data.statewise[0]:res.data.statewise[selected.value];\n\n  const active=value.active;   //to get specfic data from responce and storing with const\n  setActive(active);           //storing the state\n  const confiremed=value.confirmed;\n  setConfirmed(confiremed);\n  const death=value.deaths;\n  setdeath(death);\n  const recovered=value.recovered;\n  setRecoverd(recovered);\n  const lastupdated=value.lastupdatedtime;\n  setlastupdated(lastupdated);\n\n}).catch((err)=>{\n  console.log(err);  //err message \n});\n},[selected])\nconst handleChange=(selected)=>{\n  setSelected(selected);                \n\n}\n\n  return (\n    <div className=\"main-section\">\n      <h1>Corona virus cases  count in India</h1>\n\n      <Select\n        value={selected}\n        onChange={handleChange}\n        options={options}\n        className=\"main-select\"\n        placeholder=\"Select the state/Total India\"\n      />\n      <div className=\"main-section-cases\">\n      <p className=\"main-paragraph-1\">{active}<br></br><span style={{fontSize:\"1.8rem\"}}>Active cases</span></p>\n  <p className=\"main-paragraph-2\">{confirmed}<br></br><span style={{fontSize:\"1.8rem\"}}>Confirmed cases</span></p>\n<p className=\"main-paragraph-3\">{death}<br></br><span style={{fontSize:\"1.8rem\"}}>Total death cases</span></p>\n<p className=\"main-paragraph-4\">{recovered}<br></br><span style={{fontSize:\"1.8rem\"}}>Recovered cases</span></p>\n<p className=\"main-paragraph-5\"> {lastupdated}<br></br><span style={{fontSize:\"1.8rem\"}}>Last updated on</span></p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}